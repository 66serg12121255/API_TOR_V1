{
	"info": {
		"_postman_id": "6c7583c1-b0e7-4f86-9eed-5bb8dc210772",
		"name": "TESTS TOR Browser  V1",
		"description": "Be free!",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "clientVersion (false/false)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96fbf4b5-8df7-43a6-a479-6844c4e19b93",
								"exec": [
									"//pm.environment.set(\"version\", \"3.0.0\");",
									"",
									"",
									"",
									"pm.environment.set(\"version\", \"3.0.0\");",
									"",
									"pm.environment.set(\"udid\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A644\");",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ce8590fc-77e7-4196-8ccb-a77d1b2e80d2",
								"exec": [
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include('{\"code\":0,\"message\":\"Successfully\",\"data\":{\"isNeedUpdate\":false,\"isUpdateExists\":false}}');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"});",
									"",
									"",
									"var schema = {",
									"  ",
									"  ",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"message\",",
									"    \"data\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Successfully\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    },",
									"    \"data\": {",
									"      \"$id\": \"#/properties/data\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Data Schema\",",
									"      \"required\": [",
									"        \"isNeedUpdate\",",
									"        \"isUpdateExists\"",
									"      ], \"properties\": {",
									"        \"isNeedUpdate\": {",
									"          \"$id\": \"#/properties/data/properties/isNeedUpdate\",",
									"          \"type\": \"boolean\",",
									"          \"title\": \"The Isneedupdate Schema\",",
									"          \"default\": false,",
									"          \"examples\": [",
									"            false",
									"          ]",
									"     ",
									"        },",
									"        \"isUpdateExists\": {",
									"          \"$id\": \"#/properties/data/properties/isUpdateExists\",",
									"          \"type\": \"boolean\",",
									"          \"title\": \"The Isupdateexists Schema\",",
									"          \"default\": false,",
									"          \"examples\": [",
									"            false",
									"          ]",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"var result = tv4.validateResult(pm.response.json(), schema);",
									"if (!result.valid){",
									"    console.log (result);",
									"}",
									"",
									"pm.expect (result.valid).to.be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/clientVersion?version={{version}}&applicationPackageName={{applicationPackageName}}&=",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"clientVersion"
							],
							"query": [
								{
									"key": "version",
									"value": "{{version}}"
								},
								{
									"key": "applicationPackageName",
									"value": "{{applicationPackageName}}"
								},
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "Check is the mobile application need to be updated"
					},
					"response": []
				},
				{
					"name": "clientVersion (false/true)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96fbf4b5-8df7-43a6-a479-6844c4e19b93",
								"exec": [
									"pm.environment.set(\"version\", \"2.0.2\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "054012ef-01cc-44ec-bbb9-d38d286792c8",
								"exec": [
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(0);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include('{\"code\":0,\"message\":\"Successfully\",\"data\":{\"isNeedUpdate\":false,\"isUpdateExists\":true}}');",
									"});",
									"",
									"",
									"var schema = {",
									"  ",
									"  ",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"message\",",
									"    \"data\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Successfully\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    },",
									"    \"data\": {",
									"      \"$id\": \"#/properties/data\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Data Schema\",",
									"      \"required\": [",
									"        \"isNeedUpdate\",",
									"        \"isUpdateExists\"",
									"      ], \"properties\": {",
									"        \"isNeedUpdate\": {",
									"          \"$id\": \"#/properties/data/properties/isNeedUpdate\",",
									"          \"type\": \"boolean\",",
									"          \"title\": \"The Isneedupdate Schema\",",
									"          \"default\": false,",
									"          \"examples\": [",
									"            false",
									"          ]",
									"     ",
									"        },",
									"        \"isUpdateExists\": {",
									"          \"$id\": \"#/properties/data/properties/isUpdateExists\",",
									"          \"type\": \"boolean\",",
									"          \"title\": \"The Isupdateexists Schema\",",
									"          \"default\": false,",
									"          \"examples\": [",
									"            false",
									"          ]",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"var result = tv4.validateResult(pm.response.json(), schema);",
									"if (!result.valid){",
									"    console.log (result);",
									"}",
									"",
									"pm.expect (result.valid).to.be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/clientVersion?version={{version}}&applicationPackageName={{applicationPackageName}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"clientVersion"
							],
							"query": [
								{
									"key": "version",
									"value": "{{version}}"
								},
								{
									"key": "applicationPackageName",
									"value": "{{applicationPackageName}}"
								}
							]
						},
						"description": "Check is the mobile application need to be updated"
					},
					"response": []
				},
				{
					"name": "clientVersion (true/true)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96fbf4b5-8df7-43a6-a479-6844c4e19b93",
								"exec": [
									"pm.environment.set(\"version\", \"1.2.4\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b3648efd-7a55-4173-a657-aa2fda528dbd",
								"exec": [
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include('{\"code\":0,\"message\":\"Successfully\",\"data\":{\"isNeedUpdate\":true,\"isUpdateExists\":true}}');",
									"});",
									"",
									"",
									"var schema = {",
									"  ",
									"  ",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"message\",",
									"    \"data\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Successfully\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    },",
									"    \"data\": {",
									"      \"$id\": \"#/properties/data\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Data Schema\",",
									"      \"required\": [",
									"        \"isNeedUpdate\",",
									"        \"isUpdateExists\"",
									"      ], \"properties\": {",
									"        \"isNeedUpdate\": {",
									"          \"$id\": \"#/properties/data/properties/isNeedUpdate\",",
									"          \"type\": \"boolean\",",
									"          \"title\": \"The Isneedupdate Schema\",",
									"          \"default\": false,",
									"          \"examples\": [",
									"            false",
									"          ]",
									"     ",
									"        },",
									"        \"isUpdateExists\": {",
									"          \"$id\": \"#/properties/data/properties/isUpdateExists\",",
									"          \"type\": \"boolean\",",
									"          \"title\": \"The Isupdateexists Schema\",",
									"          \"default\": false,",
									"          \"examples\": [",
									"            false",
									"          ]",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"",
									"pm.test('Schema is valid', function() {",
									"var result = tv4.validateResult(pm.response.json(), schema);",
									"if (!result.valid){",
									"    console.log (result);",
									"}",
									"",
									"pm.expect (result.valid).to.be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/clientVersion?version={{version}}&applicationPackageName={{applicationPackageName}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"clientVersion"
							],
							"query": [
								{
									"key": "version",
									"value": "{{version}}"
								},
								{
									"key": "applicationPackageName",
									"value": "{{applicationPackageName}}"
								}
							]
						},
						"description": "Check is the mobile application need to be updated"
					},
					"response": []
				},
				{
					"name": "clientVersion (true/true)  code 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96fbf4b5-8df7-43a6-a479-6844c4e19b93",
								"exec": [
									"pm.environment.set(\"version\", \"&&&\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b3648efd-7a55-4173-a657-aa2fda528dbd",
								"exec": [
									"",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Received incorrect request data\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/clientVersion?version={{version}}&applicationPackageName={{applicationPackageName}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"clientVersion"
							],
							"query": [
								{
									"key": "version",
									"value": "{{version}}"
								},
								{
									"key": "applicationPackageName",
									"value": "{{applicationPackageName}}"
								}
							]
						},
						"description": "Check is the mobile application need to be updated"
					},
					"response": []
				},
				{
					"name": "token code 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
								"exec": [
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(32);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Device client install is empty\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
								"exec": [
									"pm.environment.set(\"version\", \"3.0.0\");",
									"",
									"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
									"",
									"pm.environment.set(\"installId\", \"\");",
									"",
									"",
									"    ",
									"var buildPayload = function(reqestBody, bodyKey = null) {",
									"    bodyKey = bodyKey || null;",
									" ",
									"    var payload = '';",
									" ",
									"    Object.keys(reqestBody).sort().forEach(function(key) {",
									"        var currentValue = reqestBody[key];",
									" ",
									"        if (currentValue === null) {",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'object') {",
									"            payload += buildPayload(currentValue, key);",
									" ",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
									"            currentValueName = currentValue.replace(/[}{]/g, '');",
									" ",
									"            if (pm.environment.has(currentValueName)) {",
									"                currentValue = pm.environment.get(currentValueName);",
									"            } else if (pm.globals.has(currentValueName)) {",
									"                currentValue = pm.globals.get(currentValueName);",
									"            }",
									"        } else if (typeof currentValue === 'boolean') {",
									"            currentValue = currentValue ? 1 : 0;",
									"        }",
									" ",
									"        if (bodyKey !== null) {",
									"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
									"        } else {",
									"            payload += key + '=' + currentValue; ",
									"        }",
									"    });",
									" ",
									"    return payload;",
									"};",
									" ",
									"var payload = '';",
									"var requestJson = pm.request.toJSON();",
									"var body = {};",
									"var queryData = pm.request.url.query.members;",
									" ",
									"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
									"    body = JSON.parse(pm.request.body);",
									"}",
									" ",
									"Object.keys(queryData).forEach(function(key) {",
									"    var item = queryData[key];",
									"    body[item.key] = item.value;",
									"});",
									" ",
									"payload = buildPayload(body);",
									" ",
									"var hash = '';",
									" ",
									"if (pm.environment.has('signatureSalt')) {",
									"    payload += pm.environment.get('signatureSalt');",
									"}",
									" ",
									"console.log(payload);",
									" ",
									"switch (pm.environment.get('signatureAlgorithm')) {",
									"    case 'md5':",
									"        hash = CryptoJS.MD5(payload).toString();",
									"        break;",
									"    default:",
									"        hash = payload;",
									"        break;",
									"}",
									" ",
									"pm.environment.set('signature', hash);",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							},
							{
								"key": "Signature",
								"value": "{{signature}}"
							},
							{
								"key": "SignatureDisable",
								"type": "text",
								"value": "1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n\n\n{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/token",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"token"
							]
						},
						"description": "Creates device if not exist. Updates device when it already created."
					},
					"response": []
				},
				{
					"name": "token code без поля installID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
								"exec": [
									"",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"0\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
								"exec": [
									"pm.environment.set(\"version\", \"3.0.0\");",
									"",
									"",
									"",
									"",
									"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
									"",
									"",
									"",
									"",
									"",
									"var buildPayload = function(reqestBody, bodyKey = null) {",
									"    bodyKey = bodyKey || null;",
									" ",
									"    var payload = '';",
									" ",
									"    Object.keys(reqestBody).sort().forEach(function(key) {",
									"        var currentValue = reqestBody[key];",
									" ",
									"        if (currentValue === null) {",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'object') {",
									"            payload += buildPayload(currentValue, key);",
									" ",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
									"            currentValueName = currentValue.replace(/[}{]/g, '');",
									" ",
									"            if (pm.environment.has(currentValueName)) {",
									"                currentValue = pm.environment.get(currentValueName);",
									"            } else if (pm.globals.has(currentValueName)) {",
									"                currentValue = pm.globals.get(currentValueName);",
									"            }",
									"        } else if (typeof currentValue === 'boolean') {",
									"            currentValue = currentValue ? 1 : 0;",
									"        }",
									" ",
									"        if (bodyKey !== null) {",
									"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
									"        } else {",
									"            payload += key + '=' + currentValue; ",
									"        }",
									"    });",
									" ",
									"    return payload;",
									"};",
									" ",
									"var payload = '';",
									"var requestJson = pm.request.toJSON();",
									"var body = {};",
									"var queryData = pm.request.url.query.members;",
									" ",
									"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
									"    body = JSON.parse(pm.request.body);",
									"}",
									" ",
									"Object.keys(queryData).forEach(function(key) {",
									"    var item = queryData[key];",
									"    body[item.key] = item.value;",
									"});",
									" ",
									"payload = buildPayload(body);",
									" ",
									"var hash = '';",
									" ",
									"if (pm.environment.has('signatureSalt')) {",
									"    payload += pm.environment.get('signatureSalt');",
									"}",
									" ",
									"console.log(payload);",
									" ",
									"switch (pm.environment.get('signatureAlgorithm')) {",
									"    case 'md5':",
									"        hash = CryptoJS.MD5(payload).toString();",
									"        break;",
									"    default:",
									"        hash = payload;",
									"        break;",
									"}",
									" ",
									"pm.environment.set('signature', hash);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							},
							{
								"key": "Signature",
								"value": "{{signature}}"
							},
							{
								"key": "SignatureDisable",
								"type": "text",
								"value": "1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n\n\n{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/token",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"token"
							]
						},
						"description": "Creates device if not exist. Updates device when it already created."
					},
					"response": []
				},
				{
					"name": "token code (3-х буквенное поле locale",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
								"exec": [
									"",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"    ",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"0\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
								"exec": [
									"pm.environment.set(\"version\", \"3.0.0\");",
									"",
									"",
									"",
									"",
									"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							},
							{
								"key": "Signature",
								"value": "{{signature}}"
							},
							{
								"key": "SignatureDisable",
								"type": "text",
								"value": "1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n\n\n{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"awa\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/token",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"token"
							]
						},
						"description": "Creates device if not exist. Updates device when it already created."
					},
					"response": []
				},
				{
					"name": "token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
								"exec": [
									"var jsonData = pm.response.json();",
									"var receivedToken = jsonData.data.token;",
									"",
									"if (!receivedToken) {",
									"    throw new Error('Token not found');",
									"}",
									"",
									"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
									"",
									"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"    ",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
								"exec": [
									"pm.environment.set(\"version\", \"3.0.0\");",
									"",
									"pm.environment.set(\"installId\", \"111111111\");",
									"",
									"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
									"",
									"var buildPayload = function(reqestBody, bodyKey = null) {",
									"    bodyKey = bodyKey || null;",
									" ",
									"    var payload = '';",
									" ",
									"    Object.keys(reqestBody).sort().forEach(function(key) {",
									"        var currentValue = reqestBody[key];",
									" ",
									"        if (currentValue === null) {",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'object') {",
									"            payload += buildPayload(currentValue, key);",
									" ",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
									"            currentValueName = currentValue.replace(/[}{]/g, '');",
									" ",
									"            if (pm.environment.has(currentValueName)) {",
									"                currentValue = pm.environment.get(currentValueName);",
									"            } else if (pm.globals.has(currentValueName)) {",
									"                currentValue = pm.globals.get(currentValueName);",
									"            }",
									"        } else if (typeof currentValue === 'boolean') {",
									"            currentValue = currentValue ? 1 : 0;",
									"        }",
									" ",
									"        if (bodyKey !== null) {",
									"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
									"        } else {",
									"            payload += key + '=' + currentValue; ",
									"        }",
									"    });",
									" ",
									"    return payload;",
									"};",
									" ",
									"var payload = '';",
									"var requestJson = pm.request.toJSON();",
									"var body = {};",
									"var queryData = pm.request.url.query.members;",
									" ",
									"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
									"    body = JSON.parse(pm.request.body);",
									"}",
									" ",
									"Object.keys(queryData).forEach(function(key) {",
									"    var item = queryData[key];",
									"    body[item.key] = item.value;",
									"});",
									" ",
									"payload = buildPayload(body);",
									" ",
									"var hash = '';",
									" ",
									"if (pm.environment.has('signatureSalt')) {",
									"    payload += pm.environment.get('signatureSalt');",
									"}",
									" ",
									"console.log(payload);",
									" ",
									"switch (pm.environment.get('signatureAlgorithm')) {",
									"    case 'md5':",
									"        hash = CryptoJS.MD5(payload).toString();",
									"        break;",
									"    default:",
									"        hash = payload;",
									"        break;",
									"}",
									" ",
									"pm.environment.set('signature', hash);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							},
							{
								"key": "Signature",
								"value": "{{signature}}"
							},
							{
								"key": "SignatureDisable",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/token",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"token"
							]
						},
						"description": "Creates device if not exist. Updates device when it already created."
					},
					"response": []
				},
				{
					"name": "token code 31",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
								"exec": [
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"31\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Device client install ID match UDID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
								"exec": [
									"pm.environment.set(\"installId\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A644\")",
									"",
									"",
									"pm.environment.set(\"udid\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A644\")",
									"",
									"",
									"",
									"",
									"var buildPayload = function(reqestBody, bodyKey = null) {",
									"    bodyKey = bodyKey || null;",
									" ",
									"    var payload = '';",
									" ",
									"    Object.keys(reqestBody).sort().forEach(function(key) {",
									"        var currentValue = reqestBody[key];",
									" ",
									"        if (currentValue === null) {",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'object') {",
									"            payload += buildPayload(currentValue, key);",
									" ",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
									"            currentValueName = currentValue.replace(/[}{]/g, '');",
									" ",
									"            if (pm.environment.has(currentValueName)) {",
									"                currentValue = pm.environment.get(currentValueName);",
									"            } else if (pm.globals.has(currentValueName)) {",
									"                currentValue = pm.globals.get(currentValueName);",
									"            }",
									"        } else if (typeof currentValue === 'boolean') {",
									"            currentValue = currentValue ? 1 : 0;",
									"        }",
									" ",
									"        if (bodyKey !== null) {",
									"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
									"        } else {",
									"            payload += key + '=' + currentValue; ",
									"        }",
									"    });",
									" ",
									"    return payload;",
									"};",
									" ",
									"var payload = '';",
									"var requestJson = pm.request.toJSON();",
									"var body = {};",
									"var queryData = pm.request.url.query.members;",
									" ",
									"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
									"    body = JSON.parse(pm.request.body);",
									"}",
									" ",
									"Object.keys(queryData).forEach(function(key) {",
									"    var item = queryData[key];",
									"    body[item.key] = item.value;",
									"});",
									" ",
									"payload = buildPayload(body);",
									" ",
									"var hash = '';",
									" ",
									"if (pm.environment.has('signatureSalt')) {",
									"    payload += pm.environment.get('signatureSalt');",
									"}",
									" ",
									"console.log(payload);",
									" ",
									"switch (pm.environment.get('signatureAlgorithm')) {",
									"    case 'md5':",
									"        hash = CryptoJS.MD5(payload).toString();",
									"        break;",
									"    default:",
									"        hash = payload;",
									"        break;",
									"}",
									" ",
									"pm.environment.set('signature', hash);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							},
							{
								"key": "Signature",
								"value": "{{signature}}"
							},
							{
								"key": "SignatureDisable",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/token",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"token"
							]
						},
						"description": "Creates device if not exist. Updates device when it already created."
					},
					"response": []
				},
				{
					"name": "token code 22",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
								"exec": [
									"",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"    ",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"22\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"UDID from the path and from the token are different\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
								"exec": [
									"pm.environment.set(\"installId\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A644\")",
									"",
									"",
									"pm.environment.set(\"udid\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A644\")",
									"",
									"",
									"",
									"var buildPayload = function(reqestBody, bodyKey = null) {",
									"    bodyKey = bodyKey || null;",
									" ",
									"    var payload = '';",
									" ",
									"    Object.keys(reqestBody).sort().forEach(function(key) {",
									"        var currentValue = reqestBody[key];",
									" ",
									"        if (currentValue === null) {",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'object') {",
									"            payload += buildPayload(currentValue, key);",
									" ",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
									"            currentValueName = currentValue.replace(/[}{]/g, '');",
									" ",
									"            if (pm.environment.has(currentValueName)) {",
									"                currentValue = pm.environment.get(currentValueName);",
									"            } else if (pm.globals.has(currentValueName)) {",
									"                currentValue = pm.globals.get(currentValueName);",
									"            }",
									"        } else if (typeof currentValue === 'boolean') {",
									"            currentValue = currentValue ? 1 : 0;",
									"        }",
									" ",
									"        if (bodyKey !== null) {",
									"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
									"        } else {",
									"            payload += key + '=' + currentValue; ",
									"        }",
									"    });",
									" ",
									"    return payload;",
									"};",
									" ",
									"var payload = '';",
									"var requestJson = pm.request.toJSON();",
									"var body = {};",
									"var queryData = pm.request.url.query.members;",
									" ",
									"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
									"    body = JSON.parse(pm.request.body);",
									"}",
									" ",
									"Object.keys(queryData).forEach(function(key) {",
									"    var item = queryData[key];",
									"    body[item.key] = item.value;",
									"});",
									" ",
									"payload = buildPayload(body);",
									" ",
									"var hash = '';",
									" ",
									"if (pm.environment.has('signatureSalt')) {",
									"    payload += pm.environment.get('signatureSalt');",
									"}",
									" ",
									"console.log(payload);",
									" ",
									"switch (pm.environment.get('signatureAlgorithm')) {",
									"    case 'md5':",
									"        hash = CryptoJS.MD5(payload).toString();",
									"        break;",
									"    default:",
									"        hash = payload;",
									"        break;",
									"}",
									" ",
									"pm.environment.set('signature', hash);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							},
							{
								"key": "Signature",
								"value": "{{signature}}"
							},
							{
								"key": "SignatureDisable",
								"type": "text",
								"value": "1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"udid\": \"232323323-232323-2323-232\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/token",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"token"
							]
						},
						"description": "Creates device if not exist. Updates device when it already created."
					},
					"response": []
				},
				{
					"name": "token code 603",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
								"exec": [
									"",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"    ",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"603\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid client version format\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
								"exec": [
									"",
									"",
									"",
									"pm.environment.set(\"version\", \"122\")",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							},
							{
								"key": "Signature",
								"value": "{{signature}}"
							},
							{
								"key": "SignatureDisable",
								"type": "text",
								"value": "1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"udid\": \"232323323-232323-2323-2323\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/token",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"token"
							]
						},
						"description": "Creates device if not exist. Updates device when it already created."
					},
					"response": []
				},
				{
					"name": "token code 602",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
								"exec": [
									"",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"    ",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"602\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Client version need update\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
								"exec": [
									"pm.environment.set(\"installId\", \"EA97C468-3B9A-4141-B5FF\");",
									"",
									"",
									"pm.environment.set(\"version\", \"1.2.4\");",
									"",
									"pm.environment.set(\"signatureSalt\", \"test_salt\");",
									"",
									"",
									"",
									"var buildPayload = function(reqestBody, bodyKey = null) {",
									"    bodyKey = bodyKey || null;",
									" ",
									"    var payload = '';",
									" ",
									"    Object.keys(reqestBody).sort().forEach(function(key) {",
									"        var currentValue = reqestBody[key];",
									" ",
									"        if (currentValue === null) {",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'object') {",
									"            payload += buildPayload(currentValue, key);",
									" ",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
									"            currentValueName = currentValue.replace(/[}{]/g, '');",
									" ",
									"            if (pm.environment.has(currentValueName)) {",
									"                currentValue = pm.environment.get(currentValueName);",
									"            } else if (pm.globals.has(currentValueName)) {",
									"                currentValue = pm.globals.get(currentValueName);",
									"            }",
									"        } else if (typeof currentValue === 'boolean') {",
									"            currentValue = currentValue ? 1 : 0;",
									"        }",
									" ",
									"        if (bodyKey !== null) {",
									"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
									"        } else {",
									"            payload += key + '=' + currentValue; ",
									"        }",
									"    });",
									" ",
									"    return payload;",
									"};",
									" ",
									"var payload = '';",
									"var requestJson = pm.request.toJSON();",
									"var body = {};",
									"var queryData = pm.request.url.query.members;",
									" ",
									"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
									"    body = JSON.parse(pm.request.body);",
									"}",
									" ",
									"Object.keys(queryData).forEach(function(key) {",
									"    var item = queryData[key];",
									"    body[item.key] = item.value;",
									"});",
									" ",
									"payload = buildPayload(body);",
									" ",
									"var hash = '';",
									" ",
									"if (pm.environment.has('signatureSalt')) {",
									"    payload += pm.environment.get('signatureSalt');",
									"}",
									" ",
									"console.log(payload);",
									" ",
									"switch (pm.environment.get('signatureAlgorithm')) {",
									"    case 'md5':",
									"        hash = CryptoJS.MD5(payload).toString();",
									"        break;",
									"    default:",
									"        hash = payload;",
									"        break;",
									"}",
									" ",
									"pm.environment.set('signature', hash);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "{{xdebug_phpstorm}}"
							},
							{
								"key": "Signature",
								"value": "{{signature}}"
							},
							{
								"key": "SignatureDisable",
								"type": "text",
								"value": "1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/token",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"token"
							]
						},
						"description": "Creates device if not exist. Updates device when it already created."
					},
					"response": []
				},
				{
					"name": "clientConfiguration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4f26d3c9-6aa3-4503-9f91-a0243db6f022",
								"exec": [
									"pm.environment.set(\"version\", \"3.0.0\");",
									"",
									"",
									"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
									"",
									"",
									"",
									"var buildPayload = function(reqestBody, bodyKey = null) {",
									"    bodyKey = bodyKey || null;",
									" ",
									"    var payload = '';",
									" ",
									"    Object.keys(reqestBody).sort().forEach(function(key) {",
									"        var currentValue = reqestBody[key];",
									" ",
									"        if (currentValue === null) {",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'object') {",
									"            payload += buildPayload(currentValue, key);",
									" ",
									"            return;",
									"        }",
									" ",
									"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
									"            currentValueName = currentValue.replace(/[}{]/g, '');",
									" ",
									"            if (pm.environment.has(currentValueName)) {",
									"                currentValue = pm.environment.get(currentValueName);",
									"            } else if (pm.globals.has(currentValueName)) {",
									"                currentValue = pm.globals.get(currentValueName);",
									"            }",
									"        } else if (typeof currentValue === 'boolean') {",
									"            currentValue = currentValue ? 1 : 0;",
									"        }",
									" ",
									"        if (bodyKey !== null) {",
									"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
									"        } else {",
									"            payload += key + '=' + currentValue; ",
									"        }",
									"    });",
									" ",
									"    return payload;",
									"};",
									" ",
									"var payload = '';",
									"var requestJson = pm.request.toJSON();",
									"var body = {};",
									"var queryData = pm.request.url.query.members;",
									" ",
									"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
									"    body = JSON.parse(pm.request.body);",
									"}",
									" ",
									"Object.keys(queryData).forEach(function(key) {",
									"    var item = queryData[key];",
									"    body[item.key] = item.value;",
									"});",
									" ",
									"payload = buildPayload(body);",
									" ",
									"var hash = '';",
									" ",
									"if (pm.environment.has('signatureSalt')) {",
									"    payload += pm.environment.get('signatureSalt');",
									"}",
									" ",
									"console.log(payload);",
									" ",
									"switch (pm.environment.get('signatureAlgorithm')) {",
									"    case 'md5':",
									"        hash = CryptoJS.MD5(payload).toString();",
									"        break;",
									"    default:",
									"        hash = payload;",
									"        break;",
									"}",
									" ",
									"pm.environment.set('signature', hash);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e98e76b2-69ec-45ae-87cf-be7eea2b1e86",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"com.nano.tor.browser.weekly\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/clientConfiguration?applicationVersion={{version}}&applicationPackageName={{applicationPackageName}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"clientConfiguration"
							],
							"query": [
								{
									"key": "applicationVersion",
									"value": "{{version}}"
								},
								{
									"key": "applicationPackageName",
									"value": "{{applicationPackageName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "clientConfiguration code 600",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4f26d3c9-6aa3-4503-9f91-a0243db6f022",
								"exec": [
									"",
									"",
									"pm.environment.set(\"version\", \"0.0.7\");",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e98e76b2-69ec-45ae-87cf-be7eea2b1e86",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 700ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"600\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/clientConfiguration?applicationVersion={{version}}&applicationPackageName={{applicationPackageName}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"clientConfiguration"
							],
							"query": [
								{
									"key": "applicationVersion",
									"value": "{{version}}"
								},
								{
									"key": "applicationPackageName",
									"value": "{{applicationPackageName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "clientConfiguration code 603",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4f26d3c9-6aa3-4503-9f91-a0243db6f022",
								"exec": [
									"",
									"",
									"",
									"pm.environment.set(\"installId\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A\")",
									"",
									"",
									"pm.environment.set(\"udid\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A644\")",
									"",
									"",
									"",
									"pm.environment.set(\"version\", \"---\");",
									"",
									"",
									"pm.environment.set(\"signatureSalt\", \"test_salt\");",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e98e76b2-69ec-45ae-87cf-be7eea2b1e86",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(700);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid client version format\");",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"603\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Signature",
								"type": "text",
								"value": "{{signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/clientConfiguration?applicationVersion={{version}}&applicationPackageName={{applicationPackageName}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"clientConfiguration"
							],
							"query": [
								{
									"key": "applicationVersion",
									"value": "{{version}}"
								},
								{
									"key": "applicationPackageName",
									"value": "{{applicationPackageName}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4da190bb-0c27-4d02-be6d-04fc01d6deb5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "027b4ee0-81ee-4f7c-9ea4-4d0d0da55fc8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Purchasing",
			"item": [
				{
					"name": "subscriptionStatus code 22",
					"item": [
						{
							"name": "token для subscriptionStatus code 22 (берем токен)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
										"exec": [
											"var jsonData = pm.response.json();",
											"var receivedToken = jsonData.data.token;",
											"",
											"if (!receivedToken) {",
											"    throw new Error('Token not found');",
											"}",
											"",
											"pm.environment.set(\"authToken_code22\", 'Bearer ' + receivedToken);",
											"",
											"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken_code22\") === 'Bearer ' + receivedToken; ",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
										"exec": [
											"pm.environment.set(\"version\", \"3.0.0\");",
											"",
											"pm.environment.set(\"installId\", \"111111111\");",
											"",
											"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
											"",
											"",
											"pm.environment.set(\"udid\", \"EA97C118-3B9A-4141-B5FF-DB2EC009A644\");",
											"",
											"",
											"var buildPayload = function(reqestBody, bodyKey = null) {",
											"    bodyKey = bodyKey || null;",
											" ",
											"    var payload = '';",
											" ",
											"    Object.keys(reqestBody).sort().forEach(function(key) {",
											"        var currentValue = reqestBody[key];",
											" ",
											"        if (currentValue === null) {",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'object') {",
											"            payload += buildPayload(currentValue, key);",
											" ",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
											"            currentValueName = currentValue.replace(/[}{]/g, '');",
											" ",
											"            if (pm.environment.has(currentValueName)) {",
											"                currentValue = pm.environment.get(currentValueName);",
											"            } else if (pm.globals.has(currentValueName)) {",
											"                currentValue = pm.globals.get(currentValueName);",
											"            }",
											"        } else if (typeof currentValue === 'boolean') {",
											"            currentValue = currentValue ? 1 : 0;",
											"        }",
											" ",
											"        if (bodyKey !== null) {",
											"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
											"        } else {",
											"            payload += key + '=' + currentValue; ",
											"        }",
											"    });",
											" ",
											"    return payload;",
											"};",
											" ",
											"var payload = '';",
											"var requestJson = pm.request.toJSON();",
											"var body = {};",
											"var queryData = pm.request.url.query.members;",
											" ",
											"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
											"    body = JSON.parse(pm.request.body);",
											"}",
											" ",
											"Object.keys(queryData).forEach(function(key) {",
											"    var item = queryData[key];",
											"    body[item.key] = item.value;",
											"});",
											" ",
											"payload = buildPayload(body);",
											" ",
											"var hash = '';",
											" ",
											"if (pm.environment.has('signatureSalt')) {",
											"    payload += pm.environment.get('signatureSalt');",
											"}",
											" ",
											"console.log(payload);",
											" ",
											"switch (pm.environment.get('signatureAlgorithm')) {",
											"    case 'md5':",
											"        hash = CryptoJS.MD5(payload).toString();",
											"        break;",
											"    default:",
											"        hash = payload;",
											"        break;",
											"}",
											" ",
											"pm.environment.set('signature', hash);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "{{xdebug_phpstorm}}"
									},
									{
										"key": "Signature",
										"value": "{{signature}}"
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"token"
									]
								},
								"description": "Creates device if not exist. Updates device when it already created."
							},
							"response": []
						},
						{
							"name": "subscriptionStatus code 22",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1f2047e-48fb-47ef-adfc-adaab560d5a2",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;   // проверка статуса",
											"    pm.response.to.be.json;  // проверка формата",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5088d51-0552-4b83-80be-ae3a564efc59",
										"exec": [
											"//запросить Token c другими данными ЮДИД  и т д",
											"//взять этот токен и вставить в данный запрос в хедер",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{authToken_code22}}",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "{{signature}}",
										"type": "text"
									},
									{
										"key": "SignatureDisable",
										"value": "1",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/EA97C118-3B9A-4141-B5FF-DB2EC009A641/subscriptionStatus",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"EA97C118-3B9A-4141-B5FF-DB2EC009A641",
										"subscriptionStatus"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "subscriptionStatus false",
					"item": [
						{
							"name": "token для subscriptionStatus (берем токен) ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
										"exec": [
											"var jsonData = pm.response.json();",
											"var receivedToken = jsonData.data.token;",
											"",
											"if (!receivedToken) {",
											"    throw new Error('Token not found');",
											"}",
											"",
											"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
											"",
											"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
										"exec": [
											"pm.environment.set(\"version\", \"3.0.0\");",
											"",
											"pm.environment.set(\"installId\", \"111111111\");",
											"",
											"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
											"",
											"",
											"pm.environment.set(\"udid_1\", \"EA97C118-3B9A-4141-B5FF-DB2EC009A644\");",
											"",
											"",
											"",
											"",
											"var buildPayload = function(reqestBody, bodyKey = null) {",
											"    bodyKey = bodyKey || null;",
											" ",
											"    var payload = '';",
											" ",
											"    Object.keys(reqestBody).sort().forEach(function(key) {",
											"        var currentValue = reqestBody[key];",
											" ",
											"        if (currentValue === null) {",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'object') {",
											"            payload += buildPayload(currentValue, key);",
											" ",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
											"            currentValueName = currentValue.replace(/[}{]/g, '');",
											" ",
											"            if (pm.environment.has(currentValueName)) {",
											"                currentValue = pm.environment.get(currentValueName);",
											"            } else if (pm.globals.has(currentValueName)) {",
											"                currentValue = pm.globals.get(currentValueName);",
											"            }",
											"        } else if (typeof currentValue === 'boolean') {",
											"            currentValue = currentValue ? 1 : 0;",
											"        }",
											" ",
											"        if (bodyKey !== null) {",
											"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
											"        } else {",
											"            payload += key + '=' + currentValue; ",
											"        }",
											"    });",
											" ",
											"    return payload;",
											"};",
											" ",
											"var payload = '';",
											"var requestJson = pm.request.toJSON();",
											"var body = {};",
											"var queryData = pm.request.url.query.members;",
											" ",
											"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
											"    body = JSON.parse(pm.request.body);",
											"}",
											" ",
											"Object.keys(queryData).forEach(function(key) {",
											"    var item = queryData[key];",
											"    body[item.key] = item.value;",
											"});",
											" ",
											"payload = buildPayload(body);",
											" ",
											"var hash = '';",
											" ",
											"if (pm.environment.has('signatureSalt')) {",
											"    payload += pm.environment.get('signatureSalt');",
											"}",
											" ",
											"console.log(payload);",
											" ",
											"switch (pm.environment.get('signatureAlgorithm')) {",
											"    case 'md5':",
											"        hash = CryptoJS.MD5(payload).toString();",
											"        break;",
											"    default:",
											"        hash = payload;",
											"        break;",
											"}",
											" ",
											"pm.environment.set('signature', hash);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "{{xdebug_phpstorm}}"
									},
									{
										"key": "Signature",
										"value": "{{signature}}"
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid_1}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}/{{udid_1}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid_1}}",
										"token"
									]
								},
								"description": "Creates device if not exist. Updates device when it already created."
							},
							"response": []
						},
						{
							"name": "subscriptionStatus false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1f2047e-48fb-47ef-adfc-adaab560d5a2",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;   // проверка статуса",
											"    pm.response.to.be.json;  // проверка формата",
											"});",
											"",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"false\");",
											"});",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.isActive).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b314a88-5f71-469b-abdb-3153506653df",
										"exec": [
											"",
											"",
											"",
											"var buildPayload = function(reqestBody, bodyKey = null) {",
											"    bodyKey = bodyKey || null;",
											" ",
											"    var payload = '';",
											" ",
											"    Object.keys(reqestBody).sort().forEach(function(key) {",
											"        var currentValue = reqestBody[key];",
											" ",
											"        if (currentValue === null) {",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'object') {",
											"            payload += buildPayload(currentValue, key);",
											" ",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
											"            currentValueName = currentValue.replace(/[}{]/g, '');",
											" ",
											"            if (pm.environment.has(currentValueName)) {",
											"                currentValue = pm.environment.get(currentValueName);",
											"            } else if (pm.globals.has(currentValueName)) {",
											"                currentValue = pm.globals.get(currentValueName);",
											"            }",
											"        } else if (typeof currentValue === 'boolean') {",
											"            currentValue = currentValue ? 1 : 0;",
											"        }",
											" ",
											"        if (bodyKey !== null) {",
											"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
											"        } else {",
											"            payload += key + '=' + currentValue; ",
											"        }",
											"    });",
											" ",
											"    return payload;",
											"};",
											" ",
											"var payload = '';",
											"var requestJson = pm.request.toJSON();",
											"var body = {};",
											"var queryData = pm.request.url.query.members;",
											" ",
											"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
											"    body = JSON.parse(pm.request.body);",
											"}",
											" ",
											"Object.keys(queryData).forEach(function(key) {",
											"    var item = queryData[key];",
											"    body[item.key] = item.value;",
											"});",
											" ",
											"payload = buildPayload(body);",
											" ",
											"var hash = '';",
											" ",
											"if (pm.environment.has('signatureSalt')) {",
											"    payload += pm.environment.get('signatureSalt');",
											"}",
											" ",
											"console.log(payload);",
											" ",
											"switch (pm.environment.get('signatureAlgorithm')) {",
											"    case 'md5':",
											"        hash = CryptoJS.MD5(payload).toString();",
											"        break;",
											"    default:",
											"        hash = payload;",
											"        break;",
											"}",
											" ",
											"pm.environment.set('signature', hash);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{authToken}}",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "{{signature}}",
										"type": "text"
									},
									{
										"key": "SignatureDisable",
										"value": "1",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}/{{udid_1}}/subscriptionStatus",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid_1}}",
										"subscriptionStatus"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "subscriptionStatus code 700",
					"item": [
						{
							"name": "token для subscriptionStatus (берем токен)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
										"exec": [
											"var jsonData = pm.response.json();",
											"var receivedToken = jsonData.data.token;",
											"",
											"if (!receivedToken) {",
											"    throw new Error('Token not found');",
											"}",
											"",
											"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
											"",
											"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
										"exec": [
											"pm.environment.set(\"version\", \"3.0.0\");",
											"",
											"pm.environment.set(\"installId\", \"111111111\");",
											"",
											"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
											"",
											"",
											"pm.environment.set(\"udid\", \"EA97C118-3B9A-4141-B5FF-DB2EC009A644\");",
											"",
											"",
											"",
											"",
											"var buildPayload = function(reqestBody, bodyKey = null) {",
											"    bodyKey = bodyKey || null;",
											" ",
											"    var payload = '';",
											" ",
											"    Object.keys(reqestBody).sort().forEach(function(key) {",
											"        var currentValue = reqestBody[key];",
											" ",
											"        if (currentValue === null) {",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'object') {",
											"            payload += buildPayload(currentValue, key);",
											" ",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
											"            currentValueName = currentValue.replace(/[}{]/g, '');",
											" ",
											"            if (pm.environment.has(currentValueName)) {",
											"                currentValue = pm.environment.get(currentValueName);",
											"            } else if (pm.globals.has(currentValueName)) {",
											"                currentValue = pm.globals.get(currentValueName);",
											"            }",
											"        } else if (typeof currentValue === 'boolean') {",
											"            currentValue = currentValue ? 1 : 0;",
											"        }",
											" ",
											"        if (bodyKey !== null) {",
											"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
											"        } else {",
											"            payload += key + '=' + currentValue; ",
											"        }",
											"    });",
											" ",
											"    return payload;",
											"};",
											" ",
											"var payload = '';",
											"var requestJson = pm.request.toJSON();",
											"var body = {};",
											"var queryData = pm.request.url.query.members;",
											" ",
											"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
											"    body = JSON.parse(pm.request.body);",
											"}",
											" ",
											"Object.keys(queryData).forEach(function(key) {",
											"    var item = queryData[key];",
											"    body[item.key] = item.value;",
											"});",
											" ",
											"payload = buildPayload(body);",
											" ",
											"var hash = '';",
											" ",
											"if (pm.environment.has('signatureSalt')) {",
											"    payload += pm.environment.get('signatureSalt');",
											"}",
											" ",
											"console.log(payload);",
											" ",
											"switch (pm.environment.get('signatureAlgorithm')) {",
											"    case 'md5':",
											"        hash = CryptoJS.MD5(payload).toString();",
											"        break;",
											"    default:",
											"        hash = payload;",
											"        break;",
											"}",
											" ",
											"pm.environment.set('signature', hash);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Cookie",
										"value": "{{xdebug_phpstorm}}"
									},
									{
										"key": "Signature",
										"value": "{{signature}}"
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"token"
									]
								},
								"description": "Creates device if not exist. Updates device when it already created."
							},
							"response": []
						},
						{
							"name": "subscriptionStatus code 700",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1f2047e-48fb-47ef-adfc-adaab560d5a2",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;   // проверка статуса",
											"    pm.response.to.be.json;  // проверка формата",
											"});",
											"",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"700\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "249af675-d364-42ed-adab-25e99b12f4ef",
										"exec": [
											"pm.environment.set(\"version\", \"3.0.0\");",
											"",
											"pm.environment.set(\"installId\", \"111111111\");",
											"",
											"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d43955\");",
											"",
											"",
											"",
											"var buildPayload = function(reqestBody, bodyKey = null) {",
											"    bodyKey = bodyKey || null;",
											" ",
											"    var payload = '';",
											" ",
											"    Object.keys(reqestBody).sort().forEach(function(key) {",
											"        var currentValue = reqestBody[key];",
											" ",
											"        if (currentValue === null) {",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'object') {",
											"            payload += buildPayload(currentValue, key);",
											" ",
											"            return;",
											"        }",
											" ",
											"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
											"            currentValueName = currentValue.replace(/[}{]/g, '');",
											" ",
											"            if (pm.environment.has(currentValueName)) {",
											"                currentValue = pm.environment.get(currentValueName);",
											"            } else if (pm.globals.has(currentValueName)) {",
											"                currentValue = pm.globals.get(currentValueName);",
											"            }",
											"        } else if (typeof currentValue === 'boolean') {",
											"            currentValue = currentValue ? 1 : 0;",
											"        }",
											" ",
											"        if (bodyKey !== null) {",
											"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
											"        } else {",
											"            payload += key + '=' + currentValue; ",
											"        }",
											"    });",
											" ",
											"    return payload;",
											"};",
											" ",
											"var payload = '';",
											"var requestJson = pm.request.toJSON();",
											"var body = {};",
											"var queryData = pm.request.url.query.members;",
											" ",
											"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
											"    body = JSON.parse(pm.request.body);",
											"}",
											" ",
											"Object.keys(queryData).forEach(function(key) {",
											"    var item = queryData[key];",
											"    body[item.key] = item.value;",
											"});",
											" ",
											"payload = buildPayload(body);",
											" ",
											"var hash = '';",
											" ",
											"if (pm.environment.has('signatureSalt')) {",
											"    payload += pm.environment.get('signatureSalt');",
											"}",
											" ",
											"console.log(payload);",
											" ",
											"switch (pm.environment.get('signatureAlgorithm')) {",
											"    case 'md5':",
											"        hash = CryptoJS.MD5(payload).toString();",
											"        break;",
											"    default:",
											"        hash = payload;",
											"        break;",
											"}",
											" ",
											"pm.environment.set('signature', hash);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{authToken}}",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "{{signature}}",
										"type": "text"
									},
									{
										"key": "SignatureDisable",
										"value": "1",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/subscriptionStatus",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"subscriptionStatus"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receipt",
					"item": [
						{
							"name": "receipt code 700",
							"item": [
								{
									"name": "token for receipt code 700",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"pm.environment.set(\"udid\", \"EA97C118-3B9A-4141-B5FF-DB2EC009A644\");",
													"",
													"",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "receipt code 700",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66be6dc9-d533-4a32-bc06-224d63fdf0ff",
												"exec": [
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(700);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{authToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\n\"receipt\": \"{{receipt}}\",\n\"price\": \"99.2\",\n\"currency\": \"USD\",\n\"country\": \"US\"\n\t\n\t\n\t\n\t\n}"
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/receipt",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"receipt"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1e6c2226-75fd-4423-b028-3dc46c17efba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "452c0ece-a7b7-472e-ab42-ba9897e00c35",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "receipt code 22",
							"item": [
								{
									"name": "token for receipt code 22 (берем токен)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"token_receipt_code 22\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"token_receipt_code 22\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"value": "1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "receipt code 22",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(22);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "Authorization",
												"value": "{{token_receipt_code 22}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\n\"receipt\": \"{{receipt}}\",\n\"price\": \"99.2\",\n\"currency\": \"USD\",\n\"country\": \"US\"\n\t\n\t\n\t\n\t\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid_22}}/receipt",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_22}}",
												"receipt"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8f3aa97e-bf60-4837-8e2b-e66c1b55cc8c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "99813733-7116-4e0a-8f8d-81f5ae16d07a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "receipt code 900",
							"item": [
								{
									"name": "token for receipt code 900 (берем токен)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"token_receipt_code 22\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"token_receipt_code 22\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"value": "1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "receipt code 900",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(900);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "Authorization",
												"value": "{{token_receipt_code 22}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\n\"receipt\": \"{{receipt}}\",\n\"price\": \"99.2\",\n\"currency\": \"USD\",\n\"country\": \"US\"\n\t\n\t\n\t\n\t\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/receipt",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"receipt"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "receipt code 904",
							"item": [
								{
									"name": "token for receipt code 904",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"value": "1",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "receipt code 904",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "receipt code 801",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cdd80cf-300f-4d27-8c70-8d9677340982",
										"exec": [
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Authentication token not found\");",
											"});",
											"",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(801);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/receipt",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"receipt"
									]
								}
							},
							"response": []
						},
						{
							"name": "receipt code 802",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f6732cd-44dc-43ef-ab4a-e649ca95cfb6",
										"exec": [
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Authentication token invalid\");",
											"});",
											"",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(802);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "ddfefrferfgerf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n\"receipt\": \"{{receipt}}\",\n\"price\": \"99.2\",\n\"currency\": \"USD\",\n\"country\": \"US\"\n\t\n\t\n\t\n\t\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/receipt",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"receipt"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "subscriptionStatus code 801",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1f2047e-48fb-47ef-adfc-adaab560d5a2",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;   // проверка статуса",
									"    pm.response.to.be.json;  // проверка формата",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"801\");",
									"});",
									"",
									"",
									"pm.test(\"Your test name 801\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.code).to.eql(801);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "SignatureDisable",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/subscriptionStatus",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"subscriptionStatus"
							]
						}
					},
					"response": []
				},
				{
					"name": "subscriptionStatus code 802",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1f2047e-48fb-47ef-adfc-adaab560d5a2",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;   // проверка статуса",
									"    pm.response.to.be.json;  // проверка формата",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"802\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a4c5c67-658b-483d-b7f6-35a2f96a1145",
								"exec": [
									"",
									"",
									"pm.environment.set(\"udid\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A645\");",
									"",
									"",
									"pm.environment.set(\"authToken\", \"EA97C468-3B9A\");",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "{{signature}}",
								"type": "text"
							},
							{
								"key": "SignatureDisable",
								"value": "1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}/{{udid}}/subscriptionStatus",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"{{udid}}",
								"subscriptionStatus"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9940b40a-ee43-4959-acc9-beb0073727c7",
						"type": "text/javascript",
						"exec": [
							"var buildPayload = function(reqestBody, bodyKey = null) {",
							"    bodyKey = bodyKey || null;",
							" ",
							"    var payload = '';",
							" ",
							"    Object.keys(reqestBody).sort().forEach(function(key) {",
							"        var currentValue = reqestBody[key];",
							" ",
							"        if (currentValue === null) {",
							"            return;",
							"        }",
							" ",
							"        if (typeof currentValue === 'object') {",
							"            payload += buildPayload(currentValue, key);",
							" ",
							"            return;",
							"        }",
							" ",
							"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
							"            currentValueName = currentValue.replace(/[}{]/g, '');",
							" ",
							"            if (pm.environment.has(currentValueName)) {",
							"                currentValue = pm.environment.get(currentValueName);",
							"            } else if (pm.globals.has(currentValueName)) {",
							"                currentValue = pm.globals.get(currentValueName);",
							"            }",
							"        } else if (typeof currentValue === 'boolean') {",
							"            currentValue = currentValue ? 1 : 0;",
							"        }",
							" ",
							"        if (bodyKey !== null) {",
							"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
							"        } else {",
							"            payload += key + '=' + currentValue; ",
							"        }",
							"    });",
							" ",
							"    return payload;",
							"};",
							" ",
							"var payload = '';",
							"var requestJson = pm.request.toJSON();",
							"var body = {};",
							"var queryData = pm.request.url.query.members;",
							" ",
							"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
							"    body = JSON.parse(pm.request.body);",
							"}",
							" ",
							"Object.keys(queryData).forEach(function(key) {",
							"    var item = queryData[key];",
							"    body[item.key] = item.value;",
							"});",
							" ",
							"payload = buildPayload(body);",
							" ",
							"var hash = '';",
							" ",
							"if (pm.environment.has('signatureSalt')) {",
							"    payload += pm.environment.get('signatureSalt');",
							"}",
							" ",
							"console.log(payload);",
							" ",
							"switch (pm.environment.get('signatureAlgorithm')) {",
							"    case 'md5':",
							"        hash = CryptoJS.MD5(payload).toString();",
							"        break;",
							"    default:",
							"        hash = payload;",
							"        break;",
							"}",
							" ",
							"pm.environment.set('signature', hash);",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c02670ca-a518-4887-94f7-0e6355d3f094",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "VPN",
			"item": [
				{
					"name": "Session",
					"item": [
						{
							"name": "vpn/session",
							"item": [
								{
									"name": "token создание девайса",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"// пользователь должен быть с подпиской",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid_subscribe}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid_subscribe}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_subscribe}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/session",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6dfe52f1-d70d-425a-997e-e76ef981c11b",
												"exec": [
													"//девайс должен быть с подпиской",
													"//",
													"//",
													"",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"pm.environment.set(\"udid_subscribe\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A692\");",
													"",
													"",
													"// пользователь должен быть с подпиской"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d606bd31-1cd4-45a1-a8fb-580e2d0e71e8",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;   // проверка статуса",
													"    pm.response.to.be.json;  // проверка формата",
													"});",
													"",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}",
												"type": "text"
											},
											{
												"key": "SignatureDisable",
												"value": "1",
												"type": "text",
												"disabled": true
											},
											{
												"key": "SignatureDisableSecretName",
												"value": "bbb28831f320a736c7e8995f1c1af219",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"country\": \"DE\"\n}"
										},
										"url": {
											"raw": "http://{{host}}/{{udid_subscribe}}/vpn/session",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_subscribe}}",
												"vpn",
												"session"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "vpn/session code 22 (нужно установить подписку)",
							"item": [
								{
									"name": "token для vpn/session code 22 (берем токен)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken_code22 (PUT_session)\", 'Bearer ' + receivedToken);",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken_code22 (PUT_session)\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"pm.environment.set(\"udid\", \"EA97C118-3B9A-4141-B5FF-DB2EC009A644\");",
													"",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/session code 22",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6dfe52f1-d70d-425a-997e-e76ef981c11b",
												"exec": [
													"//девайс должен быть с подпиской",
													"//",
													"//",
													"",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"pm.environment.set(\"udid_subscribe\", \"EA97C468-3B9A-4141-B5FF-DB2EC009A692\");",
													"",
													"",
													"// пользователь должен быть с подпиской"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d606bd31-1cd4-45a1-a8fb-580e2d0e71e8",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;   // проверка статуса",
													"    pm.response.to.be.json;  // проверка формата",
													"});",
													"",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(22);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{authToken_code22 (PUT_session)}}"
											},
											{
												"key": "Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											},
											{
												"key": "SignatureDisableSecretName",
												"type": "text",
												"value": "bbb28831f320a736c7e8995f1c1af219",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"country\": \"DE\"\n}"
										},
										"url": {
											"raw": "http://{{host}}/{{udid_code22 (PUT_session)}}/vpn/session",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_code22 (PUT_session)}}",
												"vpn",
												"session"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d87a164f-fa54-40f7-88cc-a78917d4e528",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "14bcb62b-90c9-4169-948d-59c95eee338a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "vpn/session code 700",
							"item": [
								{
									"name": "token создание девайса",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"// пользователь должен быть с подпиской",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid_subs2}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid_subs2}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_subs2}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/session code 700",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6dfe52f1-d70d-425a-997e-e76ef981c11b",
												"exec": [
													"//девайс должен быть с соответствующей версией, которая вернет: true, true",
													"//",
													"//",
													"",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598\");",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"// пользователь должен быть с подпиской"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d606bd31-1cd4-45a1-a8fb-580e2d0e71e8",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;   // проверка статуса",
													"    pm.response.to.be.json;  // проверка формата",
													"});",
													"",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(700);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{authToken}}"
											},
											{
												"key": "Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											},
											{
												"key": "SignatureDisableSecretName",
												"type": "text",
												"value": "bbb28831f320a736c7e8995f1c1af219",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"country\": \"DE\"\n}"
										},
										"url": {
											"raw": "http://{{host}}/{{udid_subs2}}/vpn/session",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_subs2}}",
												"vpn",
												"session"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "vpn/session code 903",
							"item": [
								{
									"name": "token создание девайса",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"// пользователь должен быть с подпиской",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/session code 903",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b472d788-8c34-4ad4-b717-18787c0f0854",
												"exec": [
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(903);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"    ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06b52f1f-7485-4e53-b17f-b52f3a086f2a",
												"exec": [
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{authToken}}"
											},
											{
												"key": "Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											},
											{
												"key": "SignatureDisableSecretName",
												"type": "text",
												"value": "bbb28831f320a736c7e8995f1c1af219",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"country\": \"DE\"\n}"
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/vpn/session",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"vpn",
												"session"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "vpn/session code 10001 (нужно установить подписку)",
							"item": [
								{
									"name": "token создание девайса",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"// пользователь должен быть с подпиской"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid_subs2}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid_subs2}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_subs2}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/session code 10001",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6dfe52f1-d70d-425a-997e-e76ef981c11b",
												"exec": [
													"//девайс должен быть с соответствующей версией, которая вернет: true, true",
													"//",
													"//",
													"",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"// пользователь должен быть с подпиской"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d606bd31-1cd4-45a1-a8fb-580e2d0e71e8",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;   // проверка статуса",
													"    pm.response.to.be.json;  // проверка формата",
													"});",
													"",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(10001);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{authToken}}"
											},
											{
												"key": "Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											},
											{
												"key": "SignatureDisableSecretName",
												"type": "text",
												"value": "bbb28831f320a736c7e8995f1c1af219",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"country\": \"AA\"\n}"
										},
										"url": {
											"raw": "http://{{host}}/{{udid_subs2}}/vpn/session",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_subs2}}",
												"vpn",
												"session"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a14905c7-9dd9-40ab-b906-cc1cb6040ecd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7a6c98a9-d2f9-416c-ac35-e178850cef84",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/vpn/session code 802",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6dfe52f1-d70d-425a-997e-e76ef981c11b",
										"exec": [
											"//девайс должен быть с соответствующей версией, которая вернет: true, true",
											"//",
											"//",
											"",
											"",
											"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
											"",
											"pm.environment.set(\"authToken\", \"dsfdsfsdfsdf\");",
											"",
											"",
											"",
											"// пользователь должен быть с подпиской"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d606bd31-1cd4-45a1-a8fb-580e2d0e71e8",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;   // проверка статуса",
											"    pm.response.to.be.json;  // проверка формата",
											"});",
											"",
											"",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(802);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{authToken}}"
									},
									{
										"key": "Signature",
										"type": "text",
										"value": "{{signature}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{xdebug_phpstorm}}"
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									},
									{
										"key": "SignatureDisableSecretName",
										"type": "text",
										"value": "bbb28831f320a736c7e8995f1c1af219",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"country\": \"DE\"\n}"
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/vpn/session",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"vpn",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vpn/session code 801",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6dfe52f1-d70d-425a-997e-e76ef981c11b",
										"exec": [
											"//девайс должен быть с соответствующей версией, которая вернет: true, true",
											"//",
											"//",
											"",
											"",
											"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
											"",
											"pm.environment.set(\"authToken\", \"\");",
											"",
											"",
											"",
											"// пользователь должен быть с подпиской"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d606bd31-1cd4-45a1-a8fb-580e2d0e71e8",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;   // проверка статуса",
											"    pm.response.to.be.json;  // проверка формата",
											"});",
											"",
											"",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(801);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{authToken}}"
									},
									{
										"key": "Signature",
										"type": "text",
										"value": "{{signature}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{xdebug_phpstorm}}"
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									},
									{
										"key": "SignatureDisableSecretName",
										"type": "text",
										"value": "bbb28831f320a736c7e8995f1c1af219",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"country\": \"DE\"\n}"
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/vpn/session",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"vpn",
										"session"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ServerList",
					"item": [
						{
							"name": "vpn/serverList code 22",
							"item": [
								{
									"name": "token для vpn/serverList code 22 Copy (берем UDID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 800ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"pm.environment.set(\"udid_code22 (vpn_countryList)\", \"EA97C498-3B9A-4141-B5FF-112EC009A444\");",
													"",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid_code22 (vpn_serverList)}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid_code22 (vpn_serverList)}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_code22 (vpn_serverList)}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "token для vpn/serverList code 22 (берем токен)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"",
													"",
													"",
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken_code22 (serverList_code_22)\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken_code22 (serverList_code_22)\") === 'Bearer ' + receivedToken; ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"pm.environment.set(\"udid\", \"EA97C118-3B9A-4141-B5FF-DB2EC009A634\");",
													"",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/serverList",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6815fbe-6e89-4951-91cc-10780db2e8b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0bfa7b6-a7d7-4dbf-9a2a-210b83073538",
												"exec": [
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(22);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"    ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{authToken_code22 (serverList_code_22)}}",
												"type": "text"
											},
											{
												"key": "Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/{{udid_code22 (vpn_serverList)}}/vpn/countryList",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_code22 (vpn_serverList)}}",
												"vpn",
												"countryList"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e0f6f28d-e3b3-430e-b0ef-98991dfc5478",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8a8ce45f-ff8a-4a91-bfac-983a2cfd9632",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "serverList ",
							"item": [
								{
									"name": "token создание девайса",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"// пользователь должен быть с подпиской",
													"",
													"pm.environment.get(\"version\");",
													"",
													"pm.environment.get(\"installId\");",
													"",
													"pm.environment.get(\"signatureSalt\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/serverList",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32f0534c-e6f5-40e8-a737-ef2af22fb890",
												"exec": [
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(0);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"    ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"});",
													"",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).not.to.eql(null);",
													"});",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.countryList).to.not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{authToken}}"
											},
											{
												"key": "Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											},
											{
												"key": "SignatureDisableSecretName",
												"type": "text",
												"value": "bbb28831f320a736c7e8995f1c1af219",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/vpn/serverList",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"vpn",
												"serverList"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "serverList code 700",
							"item": [
								{
									"name": "token создание девайса",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"// пользователь должен быть с подпиской",
													"",
													"pm.environment.get(\"version\");",
													"",
													"pm.environment.get(\"installId\");",
													"",
													"pm.environment.get(\"signatureSalt\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/serverList code 700",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32f0534c-e6f5-40e8-a737-ef2af22fb890",
												"exec": [
													"//pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(700);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"    ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"});",
													"",
													"",
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.countryList).to.not.eql(null);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "33410ea3-bff9-4eef-8c81-8c0f6cfd8114",
												"exec": [
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395\");",
													"",
													"pm.environment.get(\"signatureSalt\");",
													"",
													"",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{authToken}}"
											},
											{
												"key": "Signature",
												"type": "text",
												"value": "{{signature}}"
											},
											{
												"key": "Cookie",
												"type": "text",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											},
											{
												"key": "SignatureDisableSecretName",
												"type": "text",
												"value": "bbb28831f320a736c7e8995f1c1af219",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/vpn/serverList",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"vpn",
												"serverList"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/vpn/serverList code 801",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32f0534c-e6f5-40e8-a737-ef2af22fb890",
										"exec": [
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(801);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"    ",
											"    ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"});",
											"",
											"",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.countryList).to.not.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "34324324",
										"disabled": true
									},
									{
										"key": "Signature",
										"type": "text",
										"value": "{{signature}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{xdebug_phpstorm}}"
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									},
									{
										"key": "SignatureDisableSecretName",
										"type": "text",
										"value": "bbb28831f320a736c7e8995f1c1af219",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/vpn/serverList",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"vpn",
										"serverList"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vpn/serverList code 802",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32f0534c-e6f5-40e8-a737-ef2af22fb890",
										"exec": [
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(802);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"    ",
											"    ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"});",
											"",
											"",
											"",
											"pm.test(\"Your test name\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.countryList).to.not.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "34324324"
									},
									{
										"key": "Signature",
										"type": "text",
										"value": "{{signature}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{xdebug_phpstorm}}"
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									},
									{
										"key": "SignatureDisableSecretName",
										"type": "text",
										"value": "bbb28831f320a736c7e8995f1c1af219",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/vpn/serverList",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"vpn",
										"serverList"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CountryList",
					"item": [
						{
							"name": "vpn/countryList",
							"item": [
								{
									"name": "token создание девайса",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"// пользователь должен быть с подпиской",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/countryList",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6815fbe-6e89-4951-91cc-10780db2e8b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0bfa7b6-a7d7-4dbf-9a2a-210b83073538",
												"exec": [
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.countryList).to.not.eql(null);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"    ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/vpn/countryList",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"vpn",
												"countryList"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "vpn/countryList code 22",
							"item": [
								{
									"name": "token для vpn/countryList code 22 Copy (берем UDID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"pm.environment.set(\"udid_code22 (vpn_countryList)\", \"EA97C498-3B9A-4141-B5FF-112EC009A444\");",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid_code22 (PUT_session)}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid_code22 (vpn_countryList)}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_code22 (vpn_countryList)}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "token для vpn/countryList code 22 (берем токен)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken_code22 (PUT_countryList_code_22)\", 'Bearer ' + receivedToken);",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken_code22 (PUT_countryList_code_22)\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"",
													"pm.environment.set(\"udid\", \"EA97C118-3B9A-4141-B5FF-DB2EC009A634\");",
													"",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/countryList",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6815fbe-6e89-4951-91cc-10780db2e8b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0bfa7b6-a7d7-4dbf-9a2a-210b83073538",
												"exec": [
													"",
													"pm.test(\"Your test name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(22);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"    ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/{{udid_code22 (vpn_countryList)}}/vpn/countryList",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid_code22 (vpn_countryList)}}",
												"vpn",
												"countryList"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "vpn/countryList code 700",
							"item": [
								{
									"name": "token создание девайса",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f9f655-0ceb-419c-98ce-71e2350fc733",
												"exec": [
													"var jsonData = pm.response.json();",
													"var receivedToken = jsonData.data.token;",
													"",
													"if (!receivedToken) {",
													"    throw new Error('Token not found');",
													"}",
													"",
													"pm.environment.set(\"authToken\", 'Bearer ' + receivedToken);",
													"",
													"tests[\"Current authToken has been updated\"] = pm.environment.get(\"authToken\") === 'Bearer ' + receivedToken; ",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098d0962-6c74-46d0-8b59-d1a71e2ea66f",
												"exec": [
													"pm.environment.set(\"version\", \"3.0.0\");",
													"",
													"pm.environment.set(\"installId\", \"111111111\");",
													"",
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598a8\");",
													"",
													"// пользователь должен быть с подпиской",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}"
											},
											{
												"key": "Signature",
												"value": "{{signature}}"
											},
											{
												"key": "SignatureDisable",
												"type": "text",
												"value": "1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"platform\": \"{{platform}}\",\n\t\"appsflyerId\": \"{{appsflyerId}}\",\n\t\"pushToken\": \"\",\n\t\"installId\": \"{{installId}}\",\n\t\"udid\": \"{{udid}}\",\n\t\"applicationPackageName\": \"{{applicationPackageName}}\",\n\t\"idfa\": \"{{idfa}}\",\n\t\"locale\": \"{{locale}}\",\n\t\"model\": \"{{model}}\",\n\t\"osVersion\": \"{{osVersion}}\",\n\t\"applicationVersion\": \"{{version}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/token",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"token"
											]
										},
										"description": "Creates device if not exist. Updates device when it already created."
									},
									"response": []
								},
								{
									"name": "/vpn/countryList",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6815fbe-6e89-4951-91cc-10780db2e8b9",
												"exec": [
													"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598\");",
													"",
													"pm.environment.get(\"signatureSalt\");",
													"",
													"",
													"",
													"",
													"var buildPayload = function(reqestBody, bodyKey = null) {",
													"    bodyKey = bodyKey || null;",
													" ",
													"    var payload = '';",
													" ",
													"    Object.keys(reqestBody).sort().forEach(function(key) {",
													"        var currentValue = reqestBody[key];",
													" ",
													"        if (currentValue === null) {",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'object') {",
													"            payload += buildPayload(currentValue, key);",
													" ",
													"            return;",
													"        }",
													" ",
													"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
													"            currentValueName = currentValue.replace(/[}{]/g, '');",
													" ",
													"            if (pm.environment.has(currentValueName)) {",
													"                currentValue = pm.environment.get(currentValueName);",
													"            } else if (pm.globals.has(currentValueName)) {",
													"                currentValue = pm.globals.get(currentValueName);",
													"            }",
													"        } else if (typeof currentValue === 'boolean') {",
													"            currentValue = currentValue ? 1 : 0;",
													"        }",
													" ",
													"        if (bodyKey !== null) {",
													"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
													"        } else {",
													"            payload += key + '=' + currentValue; ",
													"        }",
													"    });",
													" ",
													"    return payload;",
													"};",
													" ",
													"var payload = '';",
													"var requestJson = pm.request.toJSON();",
													"var body = {};",
													"var queryData = pm.request.url.query.members;",
													" ",
													"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
													"    body = JSON.parse(pm.request.body);",
													"}",
													" ",
													"Object.keys(queryData).forEach(function(key) {",
													"    var item = queryData[key];",
													"    body[item.key] = item.value;",
													"});",
													" ",
													"payload = buildPayload(body);",
													" ",
													"var hash = '';",
													" ",
													"if (pm.environment.has('signatureSalt')) {",
													"    payload += pm.environment.get('signatureSalt');",
													"}",
													" ",
													"console.log(payload);",
													" ",
													"switch (pm.environment.get('signatureAlgorithm')) {",
													"    case 'md5':",
													"        hash = CryptoJS.MD5(payload).toString();",
													"        break;",
													"    default:",
													"        hash = payload;",
													"        break;",
													"}",
													" ",
													"pm.environment.set('signature', hash);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0bfa7b6-a7d7-4dbf-9a2a-210b83073538",
												"exec": [
													"",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(800);",
													"    ",
													"    ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    ",
													"    ",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"700\");",
													"});",
													"    ",
													"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{authToken}}",
												"type": "text"
											},
											{
												"key": "Signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{xdebug_phpstorm}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}/{{udid}}/vpn/countryList",
											"protocol": "http",
											"host": [
												"{{host}}"
											],
											"path": [
												"{{udid}}",
												"vpn",
												"countryList"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/vpn/countryList code 801",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6815fbe-6e89-4951-91cc-10780db2e8b9",
										"exec": [
											"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598\");",
											"",
											"pm.environment.get(\"signatureSalt\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c0bfa7b6-a7d7-4dbf-9a2a-210b83073538",
										"exec": [
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"    ",
											"    ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    ",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"801\");",
											"});",
											"    ",
											"});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{authToken}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"type": "text",
										"value": "{{signature}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{xdebug_phpstorm}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/vpn/countryList",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"vpn",
										"countryList"
									]
								}
							},
							"response": []
						},
						{
							"name": "/vpn/countryList code 802",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6815fbe-6e89-4951-91cc-10780db2e8b9",
										"exec": [
											"pm.environment.set(\"signatureSalt\", \"029531879ddc981b102df4d4395598\");",
											"",
											"pm.environment.get(\"signatureSalt\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c0bfa7b6-a7d7-4dbf-9a2a-210b83073538",
										"exec": [
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"    ",
											"    ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    ",
											"    ",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"802\");",
											"});",
											"    ",
											"});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "343242",
										"type": "text"
									},
									{
										"key": "Signature",
										"value": "{{signature}}",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "{{xdebug_phpstorm}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{host}}/{{udid}}/vpn/countryList",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"{{udid}}",
										"vpn",
										"countryList"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SessionState",
					"item": [
						{
							"name": "sessionState 400 (Bad request)",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{authToken}}"
									},
									{
										"key": "Signature",
										"type": "text",
										"value": "{{signature}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{xdebug_phpstorm}}",
										"disabled": true
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									},
									{
										"key": "SignatureDisableSecretName",
										"type": "text",
										"value": "bbb28831f320a736c7e8995f1c1af219",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"country\": \"DE\"\n}"
								},
								"url": {
									"raw": "http://{{host}}/v2/{{udid}}/vpn/sessionState?installId={{installId}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"v2",
										"{{udid}}",
										"vpn",
										"sessionState"
									],
									"query": [
										{
											"key": "installId",
											"value": "{{installId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "sessionState 200",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{authToken}}"
									},
									{
										"key": "Signature",
										"type": "text",
										"value": "{{signature}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{xdebug_phpstorm}}",
										"disabled": true
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									},
									{
										"key": "SignatureDisableSecretName",
										"type": "text",
										"value": "bbb28831f320a736c7e8995f1c1af219",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"country\": \"DE\"\n}"
								},
								"url": {
									"raw": "http://{{host}}/v2/{{udid}}/vpn/sessionState?installId={{installId}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"v2",
										"{{udid}}",
										"vpn",
										"sessionState"
									],
									"query": [
										{
											"key": "installId",
											"value": "{{installId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "sessionState Code 22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{authToken}}"
									},
									{
										"key": "Signature",
										"type": "text",
										"value": "{{signature}}"
									},
									{
										"key": "Cookie",
										"type": "text",
										"value": "{{xdebug_phpstorm}}",
										"disabled": true
									},
									{
										"key": "SignatureDisable",
										"type": "text",
										"value": "1",
										"disabled": true
									},
									{
										"key": "SignatureDisableSecretName",
										"type": "text",
										"value": "bbb28831f320a736c7e8995f1c1af219",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"country\": \"DE\"\n}"
								},
								"url": {
									"raw": "http://{{host}}/v2/{{udid}}/vpn/sessionState?installId={{installId}}",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"path": [
										"v2",
										"{{udid}}",
										"vpn",
										"sessionState"
									],
									"query": [
										{
											"key": "installId",
											"value": "{{installId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3679c097-dc3a-46b2-9cdc-7c2175719acd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6ab627f5-76d2-436e-9a74-5327309417af",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e8e4d1c2-e012-46a4-8c31-f00892adfba6",
				"type": "text/javascript",
				"exec": [
					"// var buildPayload = function(reqestBody, bodyKey = null) {",
					"//     bodyKey = bodyKey || null;",
					" ",
					"//     var payload = '';",
					" ",
					"//     Object.keys(reqestBody).sort().forEach(function(key) {",
					"//         var currentValue = reqestBody[key];",
					" ",
					"//         if (currentValue === null) {",
					"//             return;",
					"//         }",
					" ",
					"//         if (typeof currentValue === 'object') {",
					"//             payload += buildPayload(currentValue, key);",
					" ",
					"//             return;",
					"//         }",
					" ",
					"//         if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
					"//             currentValueName = currentValue.replace(/[}{]/g, '');",
					" ",
					"//             if (pm.environment.has(currentValueName)) {",
					"//                 currentValue = pm.environment.get(currentValueName);",
					"//             } else if (pm.globals.has(currentValueName)) {",
					"//                 currentValue = pm.globals.get(currentValueName);",
					"//             }",
					"//         } else if (typeof currentValue === 'boolean') {",
					"//             currentValue = currentValue ? 1 : 0;",
					"//         }",
					" ",
					"//         if (bodyKey !== null) {",
					"//             payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
					"//         } else {",
					"//             payload += key + '=' + currentValue; ",
					"//         }",
					"//     });",
					" ",
					"//     return payload;",
					"// };",
					" ",
					"// var payload = '';",
					"// var requestJson = pm.request.toJSON();",
					"// var body = {};",
					"// var queryData = pm.request.url.query.members;",
					" ",
					"// if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
					"//     body = JSON.parse(pm.request.body);",
					"// }",
					" ",
					"// Object.keys(queryData).forEach(function(key) {",
					"//     var item = queryData[key];",
					"//     body[item.key] = item.value;",
					"// });",
					" ",
					"// payload = buildPayload(body);",
					" ",
					"// var hash = '';",
					" ",
					"// if (pm.environment.has('signatureSalt')) {",
					"//     payload += pm.environment.get('signatureSalt');",
					"// }",
					" ",
					"// console.log(payload);",
					" ",
					"// switch (pm.environment.get('signatureAlgorithm')) {",
					"//     case 'md5':",
					"//         hash = CryptoJS.MD5(payload).toString();",
					"//         break;",
					"//     default:",
					"//         hash = payload;",
					"//         break;",
					"// }",
					" ",
					"// pm.environment.set('signature', hash);",
					"",
					"",
					"function GenerateSignature() {",
					"    ",
					"var buildPayload = function(reqestBody, bodyKey = null) {",
					"    bodyKey = bodyKey || null;",
					" ",
					"    var payload = '';",
					" ",
					"    Object.keys(reqestBody).sort().forEach(function(key) {",
					"        var currentValue = reqestBody[key];",
					" ",
					"        if (currentValue === null) {",
					"            return;",
					"        }",
					" ",
					"        if (typeof currentValue === 'object') {",
					"            payload += buildPayload(currentValue, key);",
					" ",
					"            return;",
					"        }",
					" ",
					"        if (typeof currentValue === 'string' && currentValue.includes('{{')) {",
					"            currentValueName = currentValue.replace(/[}{]/g, '');",
					" ",
					"            if (pm.environment.has(currentValueName)) {",
					"                currentValue = pm.environment.get(currentValueName);",
					"            } else if (pm.globals.has(currentValueName)) {",
					"                currentValue = pm.globals.get(currentValueName);",
					"            }",
					"        } else if (typeof currentValue === 'boolean') {",
					"            currentValue = currentValue ? 1 : 0;",
					"        }",
					" ",
					"        if (bodyKey !== null) {",
					"            payload += bodyKey + '[' + key + ']' + '=' + currentValue;",
					"        } else {",
					"            payload += key + '=' + currentValue; ",
					"        }",
					"    });",
					" ",
					"    return payload;",
					"};",
					" ",
					"var payload = '';",
					"var requestJson = pm.request.toJSON();",
					"var body = {};",
					"var queryData = pm.request.url.query.members;",
					" ",
					"if (requestJson.body.mode === 'raw' && !!requestJson.body.raw) {",
					"    body = JSON.parse(pm.request.body);",
					"}",
					" ",
					"Object.keys(queryData).forEach(function(key) {",
					"    var item = queryData[key];",
					"    body[item.key] = item.value;",
					"});",
					" ",
					"payload = buildPayload(body);",
					" ",
					"var hash = '';",
					" ",
					"if (pm.environment.has('signatureSalt')) {",
					"    payload += pm.environment.get('signatureSalt');",
					"}",
					" ",
					"console.log(payload);",
					" ",
					"switch (pm.environment.get('signatureAlgorithm')) {",
					"    case 'md5':",
					"        hash = CryptoJS.MD5(payload).toString();",
					"        break;",
					"    default:",
					"        hash = payload;",
					"        break;",
					"}",
					" ",
					"pm.environment.set('signature', hash);",
					"",
					"}",
					"GenerateSignature();"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fbc98d78-e172-4e6f-aa38-8b2b5ef5bcc2",
				"type": "text/javascript",
				"exec": [
					"",
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"    pm.response.to.be.ok;   // проверка статуса",
					"    pm.response.to.be.json;  // проверка формата",
					"});",
					"",
					"",
					"",
					"pm.test(\"Response time is less than 1300ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(1300);",
					"});",
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "917fe498-1cc8-4379-955b-f15be66ea487",
			"key": "version",
			"value": "1.2.1",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}